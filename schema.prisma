generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  extensions = [citext]

  url               = env("PRISMA_DATABASE_URL")
  shadowDatabaseUrl = env("PRISMA_SHADOW_DATABASE_URL")
}

model Mylist {
  id   String @id @default(cuid())
  slug String @db.Citext()

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  shareRange MylistShareRange @default(PRIVATE)

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  registrations MylistRegistration[]

  includedGroups MylistGroupMylistInclsion[]

  events MylistEvent[]

  @@unique([holderId, slug])
}

enum MylistShareRange {
  PUBLIC
  KNOW_LINK
  PRIVATE
}

model MylistEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  mylist   Mylist @relation(fields: [mylistId], references: [id])
  mylistId String

  type    MylistEventType
  payload Json
}

enum MylistEventType {
  CREATE
}

model MylistRegistration {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  note String?

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  isRemoved Boolean @default(false)

  events MylistRegistrationEvent[]

  @@unique([mylistId, videoId])
}

model MylistRegistrationEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  mylist               MylistRegistration @relation(fields: [mylistRegistrationId], references: [id])
  mylistRegistrationId String

  type    MylistRegistrationEventType
  payload Json
}

enum MylistRegistrationEventType {
  REGISTER

  UNREGISTER
  REREGISTER
}

model MylistGroup {
  id String @id @default(cuid())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  mylists MylistGroupMylistInclsion[]

  events MylistGroupEvent[]
}

model MylistGroupEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   MylistGroup @relation(fields: [groupId], references: [id])
  groupId String

  type    MylistGroupEventType
  payload Json
}

enum MylistGroupEventType {
  CREATE
}

model MylistGroupMylistInclsion {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  groupId String
  group   MylistGroup @relation(fields: [groupId], references: [id])

  isRemoved Boolean @default(false)

  events MylistGroupMylistInclsionEvent[]

  @@unique([mylistId, groupId])
}

model MylistGroupMylistInclsionEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  inclusion   MylistGroupMylistInclsion @relation(fields: [inclusionId], references: [id])
  inclusionId String

  type    MylistGroupMylistInclsionEventType
  payload Json
}

enum MylistGroupMylistInclsionEventType {
  INCLUDE

  EXCLUDE
  REINCLUDE
}

model Tag {
  id     String @id @default(cuid())
  serial Int    @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  disabled Boolean @map("meaningless")

  names TagName[]

  parents  TagParent[] @relation("tag_parents_childIdTotags")
  children TagParent[] @relation("tag_parents_parentIdTotags")

  videos VideoTag[]

  events TagEvent[]

  NicovideoSubmitRequestTagging        NicovideoRegistrationRequestTagging[]
  YoutubeRegistrationRequestTagging    YoutubeRegistrationRequestTagging[]
  SoundcloudRegistrationRequestTagging SoundcloudRegistrationRequestTagging[]
  BilibiliRegistrationRequestTagging   BilibiliRegistrationRequestTagging[]

  AbstractGrouping AbstractGrouping[]
}

model TagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  type    TagEventType
  payload Json
}

enum TagEventType {
  REGISTER @map("CREATE")
}

model TagName {
  id String @id

  name String

  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  events TagNameEvent[]

  @@unique([name, tagId])
}

model TagNameEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tagName   TagName @relation(fields: [tagNameId], references: [id])
  tagNameId String

  type    TagNameEventType
  payload Json
}

enum TagNameEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model TagParent {
  id String @id

  isExplicit Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  childId String
  child   Tag    @relation("tag_parents_childIdTotags", fields: [childId], references: [id])

  parentId String
  parent   Tag    @relation("tag_parents_parentIdTotags", fields: [parentId], references: [id])

  events TagParentEvent[]

  disabled Boolean @default(false)

  @@unique([parentId, childId])
}

model TagParentEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tagParent   TagParent @relation(fields: [tagParentId], references: [id])
  tagParentId String

  type    TagParentEventType
  payload Json
}

enum TagParentEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model User {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  notifications Notification[]

  mylists      Mylist[]
  mylistGroups MylistGroup[]

  MylistEvent                           MylistEvent[]
  MylistRegistrationEvent               MylistRegistrationEvent[]
  MylistGroupEvent                      MylistGroupEvent[]
  MylistGroupMylistInclsionEvent        MylistGroupMylistInclsionEvent[]
  TagEvent                              TagEvent[]
  TagNameEvent                          TagNameEvent[]
  TagParentEvent                        TagParentEvent[]
  VideoEvent                            VideoEvent[]
  VideoTitleEvent                       VideoTitleEvent[]
  VideoThumbnailEvent                   VideoThumbnailEvent[]
  VideoTagEvent                         VideoTagEvent[]
  SemitagEvent                          SemitagEvent[]
  NicovideoVideoSourceEvent             NicovideoVideoSourceEvent[]
  NicovideoRegistrationRequest          NicovideoRegistrationRequest[]
  NicovideoRegistrationRequestChecking  NicovideoRegistrationRequestChecking[]
  NicovideoRegistrationRequestEvent     NicovideoRegistrationRequestEvent[]
  YoutubeVideoSourceEvent               YoutubeVideoSourceEvent[]
  YoutubeRegistrationRequest            YoutubeRegistrationRequest[]
  YoutubeRegistrationRequestChecking    YoutubeRegistrationRequestChecking[]
  YoutubeRegistrationRequestEvent       YoutubeRegistrationRequestEvent[]
  SoundcloudVideoSourceEvent            SoundcloudVideoSourceEvent[]
  BilibiliMADSourceEvent                BilibiliMADSourceEvent[]
  SoundcloudRegistrationRequest         SoundcloudRegistrationRequest[]
  SoundcloudRegistrationRequestChecking SoundcloudRegistrationRequestChecking[]
  SoundcloudRegistrationRequestEvent    SoundcloudRegistrationRequestEvent[]
  BilibiliRegistrationRequest           BilibiliRegistrationRequest[]
  BilibiliRegistrationRequestChecking   BilibiliRegistrationRequestChecking[]
  BilibiliRegistrationRequestEvent      BilibiliRegistrationRequestEvent[]
  AbstractGroupingEvent                 AbstractGroupingEvent[]
}

model Video {
  id     String @id @default(cuid())
  serial Int    @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  titles     VideoTitle[]
  thumbnails VideoThumbnail[]

  tags     VideoTag[]
  semitags Semitag[]

  nicovideoSources  NicovideoVideoSource[]
  youtubeSources    YoutubeVideoSource[]
  soundcloudSources SoundcloudVideoSource[]
  bilibiliSources   BilibiliMADSource[]

  mylists MylistRegistration[]

  events VideoEvent[]

  NicovideoRegistrationRequestCheckings NicovideoRegistrationRequestChecking[]
  YoutubeRegistrationRequestChecking    YoutubeRegistrationRequestChecking[]
  SoundcloudRegistrationRequestChecking SoundcloudRegistrationRequestChecking[]
  BilibiliRegistrationRequestChecking   BilibiliRegistrationRequestChecking[]
}

model VideoEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type    VideoEventType
  payload Json
}

enum VideoEventType {
  REGISTER
}

model VideoTitle {
  id String @id

  title  String
  locale String @default("ja-JP")

  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events VideoTitleEvent[]

  @@unique([videoId, title])
}

model VideoTitleEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoTitle   VideoTitle @relation(fields: [videoTitleId], references: [id])
  videoTitleId String

  type    VideoTitleEventType
  payload Json
}

enum VideoTitleEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model VideoThumbnail {
  id String @id

  imageUrl  String
  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events VideoThumbnailEvent[]
}

model VideoThumbnailEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoThumbnail   VideoThumbnail @relation(fields: [videoThumbnailId], references: [id])
  videoThumbnailId String

  type    VideoThumbnailEventType
  payload Json
}

enum VideoThumbnailEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model VideoTag {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isRemoved Boolean @default(false)

  events VideoTagEvent[]

  semitagResolvings SemitagChecking[]

  @@unique([videoId, tagId])
}

model VideoTagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoTag   VideoTag @relation(fields: [videoTagId], references: [id])
  videoTagId String

  type    VideoTagEventType
  payload Json
}

enum VideoTagEventType {
  ATTACH

  DETACH
  REATTACH
}

model Semitag {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isChecked Boolean
  checking  SemitagChecking?

  events SemitagEvent[]
}

model SemitagChecking {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  note String?

  semitag   Semitag @relation(fields: [semitagId], references: [id])
  semitagId String  @unique

  videoTag   VideoTag? @relation(fields: [videoTagId], references: [id])
  videoTagId String?
}

model SemitagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  semitag   Semitag @relation(fields: [semitagId], references: [id])
  semitagId String

  type    SemitagEventType
  payload Json
}

enum SemitagEventType {
  ATTACH

  RESOLVE
  REJECT
}

model NicovideoVideoSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events NicovideoVideoSourceEvent[]

  registeredAt DateTime?

  isOriginal Boolean @default(true) // 転載などのケースでは`false`

  account   NicovideoAccount? @relation(fields: [accountId], references: [id])
  accountId String?

  thumbnailUrl String? // otomadb側が保存している最もフレッシュなサムネイルのURL

  @@unique([sourceId, videoId])
}

model NicovideoVideoSourceEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  source   NicovideoVideoSource @relation(fields: [sourceId], references: [id])
  sourceId String

  type    NicovideoVideoSourceEventType
  payload Json
}

enum NicovideoVideoSourceEventType {
  CREATE
}

model NicovideoRegistrationRequest {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String

  sourceId String @unique

  title        String
  thumbnailUrl String
  taggings     NicovideoRegistrationRequestTagging[]
  semitaggings NicovideoRegistrationRequestSemitagging[]

  isChecked Boolean
  checking  NicovideoRegistrationRequestChecking?

  events NicovideoRegistrationRequestEvent[]
}

model NicovideoRegistrationRequestTagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  note String?
}

model NicovideoRegistrationRequestSemitagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  name String

  note String?
}

model NicovideoRegistrationRequestChecking {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  checkedBy   User   @relation(fields: [checkedById], references: [id])
  checkedById String

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String                       @unique

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?

  note String?
}

model NicovideoRegistrationRequestEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  type    NicovideoRegistrationRequestEventType
  payload Json?
}

enum NicovideoRegistrationRequestEventType {
  REQUEST

  ACCEPT
  REJECT
}

model YoutubeVideoSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events YoutubeVideoSourceEvent[]

  isOriginal Boolean @default(true) // 転載などのケースでは`false`

  thumbnailUrl String? // otomadb側が保存している最もフレッシュなサムネイルのURL

  YoutubeRegistrationRequestChecking YoutubeRegistrationRequestChecking[]
}

model YoutubeVideoSourceEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  source   YoutubeVideoSource @relation(fields: [sourceId], references: [id])
  sourceId String

  type    YoutubeVideoSourceEventType
  payload Json
}

enum YoutubeVideoSourceEventType {
  CREATE
}

model YoutubeRegistrationRequest {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String

  sourceId String @unique

  title        String
  thumbnailUrl String
  taggings     YoutubeRegistrationRequestTagging[]
  semitaggings YoutubeRegistrationRequestSemitagging[]

  isChecked Boolean
  checking  YoutubeRegistrationRequestChecking?

  events YoutubeRegistrationRequestEvent[]
}

model YoutubeRegistrationRequestTagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   YoutubeRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  note String?
}

model YoutubeRegistrationRequestSemitagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   YoutubeRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  name String

  note String?
}

model YoutubeRegistrationRequestChecking {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  checkedBy   User   @relation(fields: [checkedById], references: [id])
  checkedById String

  request   YoutubeRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String                     @unique

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?

  videoSource   YoutubeVideoSource? @relation(fields: [videoSourceId], references: [id])
  videoSourceId String?

  note String?

  resolved Boolean @default(false)

  notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?       @unique
}

model YoutubeRegistrationRequestEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  request   YoutubeRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  type    YoutubeRegistrationRequestEventType
  payload Json?
}

enum YoutubeRegistrationRequestEventType {
  REQUEST

  ACCEPT
  REJECT

  RESOLVE
}

model SoundcloudRegistrationRequest {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String

  sourceId String @unique

  title        String
  thumbnailUrl String
  taggings     SoundcloudRegistrationRequestTagging[]
  semitaggings SoundcloudRegistrationRequestSemitagging[]

  isChecked Boolean
  checking  SoundcloudRegistrationRequestChecking?

  events SoundcloudRegistrationRequestEvent[]
}

model SoundcloudRegistrationRequestTagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   SoundcloudRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  note String?
}

model SoundcloudRegistrationRequestSemitagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   SoundcloudRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  name String

  note String?
}

model SoundcloudRegistrationRequestChecking {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  checkedBy   User   @relation(fields: [checkedById], references: [id])
  checkedById String

  request   SoundcloudRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String                        @unique

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?

  note String?
}

model SoundcloudRegistrationRequestEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  request   SoundcloudRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  type    SoundcloudRegistrationRequestEventType
  payload Json?
}

enum SoundcloudRegistrationRequestEventType {
  REQUEST

  ACCEPT
  REJECT
}

model SoundcloudVideoSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events SoundcloudVideoSourceEvent[]

  isOriginal Boolean @default(true) // 転載などのケースでは`false`

  thumbnailUrl String? // otomadb側が保存している最もフレッシュなサムネイルのURL

  @@unique([sourceId, videoId])
}

model SoundcloudVideoSourceEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  source   SoundcloudVideoSource @relation(fields: [sourceId], references: [id])
  sourceId String

  type    SoundcloudVideoSourceEventType
  payload Json
}

enum SoundcloudVideoSourceEventType {
  CREATE
}

model Notification {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  notifyTo   User   @relation(fields: [notifyToId], references: [id])
  notifyToId String

  isWatched Boolean @default(false) @map("watched")

  type    NotificationType
  payload Json

  YoutubeRegistrationRequestChecking YoutubeRegistrationRequestChecking?
}

enum NotificationType {
  ACCEPTING_NICOVIDEO_REGISTRATION_REQUEST
  REJECTING_NICOVIDEO_REGISTRATION_REQUEST

  ACCEPTING_YOUTUBE_REGISTRATION_REQUEST
  REJECTING_YOUTUBE_REGISTRATION_REQUEST
  RESOLVING_YOUTUBE_REGISTRATION_REQUEST

  ACCEPTING_BILIBILI_REGISTRATION_REQUEST
  REJECTING_BILIBILI_REGISTRATION_REQUEST

  ACCEPTING_SOUNDCLOUD_REGISTRATION_REQUEST
  REJECTING_SOUNDCLOUD_REGISTRATION_REQUEST
}

model BilibiliMADSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events BilibiliMADSourceEvent[]

  isOriginal Boolean @default(true) // 転載などのケースでは`false`

  thumbnailUrl String? // otomadb側が保存している最もフレッシュなサムネイルのURL

  @@unique([sourceId, videoId])
}

model BilibiliMADSourceEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  source   BilibiliMADSource @relation(fields: [sourceId], references: [id])
  sourceId String

  type    BilibiliMADSourceEventType
  payload Json
}

enum BilibiliMADSourceEventType {
  CREATE
}

model BilibiliRegistrationRequest {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String

  sourceId String @unique

  title        String
  thumbnailUrl String
  taggings     BilibiliRegistrationRequestTagging[]
  semitaggings BilibiliRegistrationRequestSemitagging[]

  isChecked Boolean
  checking  BilibiliRegistrationRequestChecking?

  events BilibiliRegistrationRequestEvent[]
}

model BilibiliRegistrationRequestTagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   BilibiliRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  note String?
}

model BilibiliRegistrationRequestSemitagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   BilibiliRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  name String

  note String?
}

model BilibiliRegistrationRequestChecking {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  checkedBy   User   @relation(fields: [checkedById], references: [id])
  checkedById String

  request   BilibiliRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String                      @unique

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?

  note String?
}

model BilibiliRegistrationRequestEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  request   BilibiliRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  type    BilibiliRegistrationRequestEventType
  payload Json?
}

enum BilibiliRegistrationRequestEventType {
  REQUEST

  ACCEPT
  REJECT
}

model AbstractGroup {
  keyword String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  names AbstractGroupName[]

  groupings AbstractGrouping[]
}

model AbstractGroupName {
  id String @id @default(cuid())

  locale String
  name   String

  group        AbstractGroup @relation(fields: [groupKeyword], references: [keyword])
  groupKeyword String

  @@unique([groupKeyword, locale])
}

model AbstractGrouping {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  group        AbstractGroup @relation(fields: [groupKeyword], references: [keyword])
  groupKeyword String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  disabled Boolean

  events AbstractGroupingEvent[]

  @@unique([groupKeyword, tagId])
}

model AbstractGroupingEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  AbstractGrouping   AbstractGrouping @relation(fields: [abstractGroupingId], references: [id])
  abstractGroupingId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type    AbstractGroupingEventType
  payload Json?
}

enum AbstractGroupingEventType {
  INCLUDE // 入れた時
  EXCLUDE // 排斥したとき
  REINCLUDE // 再度入れたとき
}

// ニコニコ動画の新作
model NicovideoNewVideo {
  id String @id @default(cuid())

  sourceId     String   @unique /// ニコニコ動画側のID
  registeredAt DateTime /// ニコニコ動画側の公開日時

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checked Boolean @default(false)
}

// ニコニコ動画上でのアカウント
model NicovideoAccount {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId String @unique

  sources NicovideoVideoSource[]

  name String
}
